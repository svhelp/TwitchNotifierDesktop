import { app, BrowserWindow, ipcMain, Menu, shell, Tray } from 'electron';
import { IAppContainer } from 'interfaces';
import { startServer } from 'modules/auth-server';
import { initNotifierCore } from 'modules/notifier-core';
import { initAccessToken, removeAccessToken } from 'modules/token-storage';
import { getAssetPath } from 'utils/path-utils';
// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require('electron-squirrel-startup')) {
  app.quit();
}

let isQuiting: boolean;

const appContainer: IAppContainer = {
  mainWindow: null,
  notifier: null,
  tray: null
}

const createTray = () => {
  const tray = new Tray(getAssetPath(app, 'icon.ico'))

  const contextMenu = Menu.buildFromTemplate([
    { label: 'Open', click: () => {
      if (!appContainer.mainWindow){
        return;
      }

      appContainer.mainWindow.show();
    }},
    { label: 'Quit', click: () => {
      isQuiting = true;
      app.quit();
    }}
  ])

  tray.on('double-click', () => {
    if (!appContainer.mainWindow){
      return;
    }

    appContainer.mainWindow.show();
  })
  
  tray.setToolTip('Twitch Notifier')
  tray.setContextMenu(contextMenu)

  return tray;
}

const createWindow = async () => {
  // Create the browser window.
  const mainWindow = new BrowserWindow({
    show: false,
    width: 1024,
    height: 728,
    icon: getAssetPath(app, 'icon.png'),
    webPreferences: {
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY
    },
  });

  // and load the index.html of the app.
  mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);

  mainWindow.on('close', event => {
    if (!mainWindow) {
      throw new Error('"mainWindow" is not defined');
    }

    if (isQuiting) {
      return;
    }
    
    console.log("***Quit prevented")
    
    event.preventDefault();
    mainWindow.hide();
    event.returnValue = false;
  })

  mainWindow.on('closed', () => {
    appContainer.mainWindow = null;
  });

  // Open urls in the user's browser
  mainWindow.webContents.setWindowOpenHandler((edata) => {
    shell.openExternal(edata.url);
    return { action: 'deny' };
  });
  
  // Open the DevTools.
  mainWindow.webContents.openDevTools();

  return mainWindow;
};

/**
 * Add event listeners...
 */

app.on('before-quit', () => {
  isQuiting = true;

  appContainer.notifier?.stopPolling();
  appContainer.tray?.destroy();
});

Menu.setApplicationMenu(null);

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on('ready', async () => {
  startServer(appContainer);

  appContainer.notifier = initNotifierCore();
  appContainer.tray = createTray();
  appContainer.mainWindow = await createWindow();
});

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on('window-all-closed', () => {
  if (process.platform !== 'darwin') {
    app.quit();
  }
});

app.on('activate', () => {
  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow();
  }
});

ipcMain.handle('request_token', () => {
  return initAccessToken();
})

ipcMain.on('remove_token', async () => {
  //appContainer.notifier?.stopPolling();
  removeAccessToken();
});

// In this file you can include the rest of your app's specific main process
// code. You can also put them in separate files and import them here.
